# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: c8y-devicecontrol-notifications
  topics:
    - c8y/devicecontrol/notifications
  template:
    type: jsonnet
    value: |
      local utils = import 'utils.libsonnet';
      local c8y = import 'c8y.libsonnet';

      {
          message: {
            # Replace any internal urls with external ones
            payload: utils.recurseReplace(
              message,
              'https?://\\bt\\d+\\.(cumulocity.com|latest.stage.c8y.io)',
              'https://' + std.get(meta, 'c8y_http', std.get(meta.env, 'TEDGE_ROUTE_C8Y_BASEURL', ''))
            ),
            _ctx: {
              local _ctx = self,
              local device_id = std.get(meta, 'device_id', ''),

              serial: utils.get(message, 'externalSource.externalId', ''),
              localSerial: utils.trimPrefix(_ctx.serial, device_id + '_'),
              parent: if _ctx.serial == device_id then "" else device_id,

              deviceID: std.get(message, 'deviceId', ''),
              agentID: std.get(message, 'agentId', ''),
              operationID: std.get(message, 'id', ''),
              opType: c8y.operation.type(message, 'c8y_', 'unknown'),
              id: if _ctx.operationID != "" then _ctx.operationID else _.ID(),
            },
          },
          topic: 'c8y/devicecontrol/notifications/' + $.message._ctx.serial + '/' + $.message._ctx.opType,
          skip: $.message._ctx.serial == '',
          end: false,
      }

#
# Shell/Command operation
#
- name: shell-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Command
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      {
          topic: std.join(
            "/",
            [
              target,
              'cmd/execute_shell',
              ctx.id,
            ]
          ),
          message: {
            id: ctx.id,
            command: message.payload.c8y_Command.text,
          },
          retain: true,
          context: false,
      }

#
# Restart
#
- name: restart-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Restart
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      {
        topic: std.join(
            "/",
            [
              target,
              'cmd/restart',
              ctx.id,
            ]
          ),
        message: {
          id: ctx.id,
          status: 'pending',
        },
        retain: true,
        context: false,
      }

#
# Configuration
#
- name: upload-config-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_UploadConfigFile
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      local fragment = std.get(message.payload, 'c8y_UploadConfigFile', {});
      local configType = std.get(fragment, 'type', '');
      {
        topic: std.join(
            "/",
            [
              target,
              'cmd/config_snapshot',
              ctx.id,
            ]
          ),
        message: {
          id: ctx.id,
          status: 'pending',
          type: configType,
          url: 'http://0.0.0.0:8000/tedge/file-transfer/%s/%s/%s' % [ctx.serial, 'config_snapshot', configType],
        },
        retain: true,
        context: false,
      }

- name: download-config-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_DownloadConfigFile
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      local fragment = std.get(message.payload, 'c8y_DownloadConfigFile', {});
      {
        topic: std.join(
            "/",
            [
              target,
              'cmd/config_update',
              ctx.id,
            ]
          ),
        message: {
          id: ctx.id,
          status: 'pending',
          type: std.get(fragment, 'type', ''),
          url: std.get(fragment, 'url', ''),
        },
        retain: true,
        context: false,
      }

#
# Software
#
- name: software-update-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_SoftwareUpdate
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      local defaultType = std.get(meta, 'software_plugin_default', 'apt');
      local types = std.set([
        std.get(item, 'softwareType', defaultType)
        for item in message.payload.c8y_SoftwareUpdate
      ]);

      {
        topic: std.join(
            "/",
            [
              target,
              'cmd/software_update',
              ctx.id,
            ]
          ),
        message: {
          id: ctx.id,
          status: 'pending',
          updateList: [
            {
              type: type,
              modules: [
                {
                  name: std.get(software, 'name'),
                  version: std.strReplace(software.version, "::" + type, ""),
                  action: std.get(software, 'action', 'install'),
                }
                for software in message.payload.c8y_SoftwareUpdate
                if std.get(software, 'softwareType', defaultType) == type
              ]
            }
            for type in types
          ],
        },
        retain: true,
        context: false,
      }
  
#
# Firmware
#
- name: firmware-update-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Firmware
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local target = tedge.te.convertToTopic(ctx.serial, meta=meta);
      local params = std.get(message.payload, ctx.opType, {});

      {
        topic: std.join(
            "/",
            [
              target,
              'cmd/firmware_update',
              ctx.id,
            ]
          ),
        message: {
          id: ctx.id,
          status: 'pending',
          name: params.name,
          url: params.url,
          version: params.version,
          sha256: std.get(params, 'sha256', null),
        },
        retain: true,
        context: false,
      }