# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: c8y-devicecontrol-notifications
  topics:
    - c8y/devicecontrol/notifications
  template:
    type: jsonnet
    value: |
      local utils = import 'utils.libsonnet';
      local c8y = import 'c8y.libsonnet';

      {
          message: {
            # Replace any internal urls with external ones
            payload: utils.recurseReplace(
              message,
              'https?://\\bt\\d+\\.(cumulocity.com|latest.stage.c8y.io)',
              'https://' + std.get(meta, 'c8y_http', std.get(meta.env, 'TEDGE_ROUTE_C8Y_BASEURL', ''))
            ),
            _ctx: {
              local _ctx = self,
              local device_id = std.get(meta, 'device_id', ''),

              serial: utils.get(message, 'externalSource.externalId', ''),
              localSerial: utils.trimPrefix(_ctx.serial, device_id + '_'),
              parent: if _ctx.serial == device_id then "" else device_id,

              deviceID: std.get(message, 'deviceId', ''),
              agentID: std.get(message, 'agentId', ''),
              operationID: std.get(message, 'id', ''),
              opType: c8y.operation.type(message, 'c8y_', 'unknown'),
              id: if _ctx.operationID != "" then _ctx.operationID else _.ID(),
            },
          },
          topic: 'c8y/devicecontrol/notifications/' + $.message._ctx.serial + '/' + $.message._ctx.opType,
          skip: $.message._ctx.serial == '',
          end: false,
      }

#
# Shell/Command operation
#
- name: shell-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Command
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      {
          topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/req/operations/command',
          message: {
            id: ctx.id,
            command: message.payload.c8y_Command.text,
          },
          context: false,
      }

#
# Restart
#
- name: restart-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Restart
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      {
        topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/req/control/restart',
        message: {},
      }

#
# Configuration
#
- name: upload-config-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_UploadConfigFile
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local params = std.get(message.payload, 'c8y_UploadConfigFile', {});
      {
          local configType = std.get(params, 'type', ''),

          topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/req/config_snapshot',
          message: {
            # Hide id for now
            id:: ctx.id,
            type: configType,
            url: 'http://0.0.0.0:8000/tedge/file-transfer/%s/%s/%s' % [ctx.serial, 'config_snapshot', configType],
          },
      }

- name: download-config-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_DownloadConfigFile
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local fragment = std.get(message.payload, 'c8y_DownloadConfigFile', {});
      {
        topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/req/config_update',
        message: {
          type: std.get(fragment, 'type', ''),
          url: std.get(fragment, 'url', ''),
        },
      }

#
# Software
#
- name: software-update-operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_SoftwareUpdate
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';

      local defaultType = std.get(meta, 'software_plugin_default', 'apt');

      local types = std.set([
        std.get(item, 'softwareType', defaultType)
        for item in message.payload.c8y_SoftwareUpdate
      ]);

      {
        topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/req/software/update',
        context: false,
        message: {
          id: ctx.id,
          updateList: [
            {
              type: type,
              modules: [
                {
                  name: std.get(software, 'name'),
                  version: std.strReplace(software.version, "::" + type, ""),
                  action: std.get(software, 'action', 'install'),
                }
                for software in message.payload.c8y_SoftwareUpdate
                if std.get(software, 'softwareType', defaultType) == type
              ]
            }
            for type in types
          ]
        },
      }

#
# Firmware
#
- name: firmware-update-operation
  description: Incoming Firmware update operation
  topics:
    - c8y/devicecontrol/notifications/+/c8y_Firmware
  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local params = std.get(message.payload, ctx.opType, {});
      assert 'name' in params : ".name is missing: opType=" + ctx.opType;

      {
        topic: tedge.topicPrefix(ctx.localSerial, ctx.parent) + '/commands/firmware_update/start',
        context: false,
        message: {
          id: if 'operationID' in ctx then ctx.operationID else ctx.id,
          device: ctx.localSerial,
          name: params.name,
          url: params.url,
          version: params.version,
          sha256: std.get(params, 'sha256', null),
        },
      }

- name: firmware-update-operation-done
  description: Update the firmware list in Cumulocity
  topics:
    - tedge/+/commands/firmware_update/done/failed
    - tedge/+/commands/firmware_update/done/successful
  template:
    type: jsonnet
    value: |
      local prefix = std.split(topic, "/commands/")[0];

      # TODO: Get the status from the message body
      local status = std.split(topic, "/done/")[1];

      local sourceDevice = std.split(topic, '/')[1];
      local build_smartrest_topic = function(base_topic)
        local device_id = std.get(meta, 'device_id', '');

        if sourceDevice == device_id || sourceDevice == 'not-set'  then
          base_topic
        else
          '%s/%s' % [base_topic, device_id + '_' + sourceDevice]
      ;

      {
        updates: [
          {
            local firmwareName = std.get(message, 'name', ''),
            local firmwareVersion = std.get(message, 'version', ''),
            local firmwareUrl = std.get(message, 'url', ''),

            topic: build_smartrest_topic('c8y/s/us'),
            message: "115,%s,%s,%s" % [firmwareName, firmwareVersion, firmwareUrl],
          }
        ],
        topic: '%s/commands/firmware_update/done' % prefix,
        message: {status: status} + message,
        context: true,
      }

- name: set-operation-to-executing
  description: Set any Cumulocity operation to executing
  topics:
    - tedge/+/commands/+/executing
  template:
    type: jsonnet
    value: |
      assert 'id' in message : 'Message must container a .id value';
      {
        api: {
          path: "/devicecontrol/operations/%s" % message.id,
          method: "PUT",
        },
        message: message + {
          id:: null,
          startedAt: _.Now(),
          status: 'EXECUTING',
        },
        context: false,
      }

- name: set-operation-to-done
  description: Set any Cumulocity operation to either SUCCESSFUL or FAILED
  topics:
    - tedge/+/commands/+/done
  template:
    type: jsonnet
    value: |
      assert 'id' in message : 'Message must contain an .id property';
      assert 'status' in message : 'Message must contain an .status property';

      local c8yStatus = std.asciiUpper(message.status);

      {
        api: {
          path: "/devicecontrol/operations/%s" % message.id,
          method: "PUT",
        },
        message: message + {
          id:: null,  # id must be excluded from the update request
          status: c8yStatus,
          [if c8yStatus == "FAILED" then 'failureReason']: std.get(message, 'reason', 'no reason given'),
        },
        context: false,
      }

- name: deprecate-c8y-operation-update
  skip: true
  description: Generic Cumulocity update operation via REST API
  topics:
    - c8y/devicecontrol/notifications/+/c8y
  template:
    type: jsonnet
    value: |
      # Fail early if the operation is missing required data
      assert "id" in message : "Message must contain a .id property";
      assert "status" in message : "Message must contain a .status property";

      local c8y = import 'c8y.libsonnet';

      local status = c8y.operation.status(message.status);
      {
        api: {
          path: "/devicecontrol/operations/%s" % message.id,
          method: "PUT",
        },
        message: message + {
          id:: null,  # id must be excluded from the update request
          status: status,
          [if status == "FAILED" then 'failureReason']: std.get(message, 'reason', 'no reason given'),
        },
        context: false,
      }

#
# Unknown operations
#
- name: unknown-operation
  topics:
    - c8y/devicecontrol/notifications/+/unknown
  template:
    type: jsonnet
    value: |
      {
        topic: 'tedge/events/unknown_operation',
        message: {
          text: 'Unknown operation type. Check the _request fragment to inspect the original message',
          _request: message.payload,
        },
      }


#
# Operation Transitions
#

#
# Software
#
- name: software update (main device)
  topics:
    - tedge/commands/res/software/update
  description: Handle the operation updates and send the status back to the cloud
  template:
    type: jsonnet
    value: |
      local id = std.get(message, 'id', 'unknown');
      local status = std.get(message, 'status', 'unknown');
      local reason = std.get(message, 'reason', 'unknown');

      local getTemplate = function(s)
        local states = {
          executing: '501,c8y_SoftwareUpdate',
          successful: '503,c8y_SoftwareUpdate',
          failed: '502,c8y_SoftwareUpdate,"%s"' % reason,
        };
        std.get(states, s, '400,tedge_custom_mapper,"Unexpected operation state. id=%s, state=%s"' % [id, s])
      ;

      {
        topic: 'c8y/s/us',
        raw_message: getTemplate(status),
      }

- name: software update (child devices)
  topics:
    - tedge/+/commands/res/software/update
  description: Handle the operation updates and send the status back to the cloud
  template:
    type: jsonnet
    value: |
      local id = std.get(message, 'id', 'unknown');
      local status = std.get(message, 'status', 'unknown');
      local reason = std.get(message, 'reason', 'unknown');

      # Check if tedge can be modified to preserve the _ctx property
      local device_id = std.get(meta, 'device_id', '');
      local local_serial = std.split(topic, "/")[1];
      local serial = if std.startsWith(local_serial, device_id) then
          local_serial
        else
          '%s_%s' % [device_id, local_serial]
        ;

      local getTemplate = function(s)
        local states = {
          executing: '501,c8y_SoftwareUpdate',
          successful: '503,c8y_SoftwareUpdate',
          failed: '502,c8y_SoftwareUpdate,"%s"' % reason,
        };
        std.get(states, s, '400,tedge_custom_mapper,"Unexpected operation state. id=%s, state=%s"' % [id, s])
      ;

      local types = std.set([
        item.type
        for item in std.get(message, 'currentSoftwareList', [])
      ]);

      local packages = [
        std.map(
          function(i) i + {type: type},
          std.filter(function(v) v.type == type, message.currentSoftwareList)[0].modules,
        )
        for type in types
      ];

      local toLegacySoftwareList = function(items)
        "116," + std.join(
          ",",
          std.map(
            function(item)
              "%s,%s,%s" % [item.name, item.version, std.get(item, 'url', '')],
            items,
          )
        )
      ;

      local toAdvancedSoftwareList = function(items)
        "140," + std.join(
          ",",
          std.map(
            function(item)
              "%s,%s,%s,%s" % [item.name, item.version, item.type, std.get(item, 'url', '')],
            items,
          )
        )
      ;

      local formatMessage = function(items, mode='')
        if mode == 'legacy' then
          toLegacySoftwareList(items)
        else
          toAdvancedSoftwareList(items)
      ;

      # Control which smart rest template id to use
      # either legacy or advanced. Defaults to advanced.
      local c8ySoftwareMode = '';

      {
        # TODO: replace serial with ctx.serial once the operation schema allow extra fields
        topic: 'c8y/s/us/%s' % serial,

        raw_message: getTemplate(status),
        [if std.length(packages) > 0 then 'updates']: [
          {topic: $.topic, message: formatMessage(packages[0], c8ySoftwareMode)},
        ],
      }
