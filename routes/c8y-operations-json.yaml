# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: c8y-devicecontrol-notifications
  topic: c8y/devicecontrol/notifications
  template:
    type: jsonnet
    value: |
      # NB: Recurse the main object, looking for strings to replace
      local recurseReplace(any, from, to) = (
        {
          object: function(x) { [k]: recurseReplace(x[k], from, to) for k in std.objectFields(x) },
          array: function(x) [recurseReplace(e, from, to) for e in x],
          string: function(x) _.ReplacePattern(x, from, to),
          # string: function(x) std.strReplace(x, from, to),
          number: function(x) x,
          boolean: function(x) x,
          'function': function(x) x,
          'null': function(x) x,
        }[std.type(any)](any)
      );

      local detectType = function(m, prefix='', defaultType='unknown')
        {
          local _matches = [
            item.key
            for item in std.objectKeysValues(m)
            if (std.isObject(item.value) || std.isArray(item.value)) && std.startsWith(item.key, prefix)
          ],
          type: if std.length(_matches) > 0 then _matches[0] else defaultType,
        };

      {
          message: {
            # Replace any internal urls with external ones
            payload: recurseReplace(
              message,
              'https?://\\bt\\d+\\.(cumulocity.com|latest.stage.c8y.io)',
              'https://' + std.get(meta, 'c8y_http', std.get(meta.env, 'TEDGE_ROUTE_C8Y_BASEURL', ''))
            ),
            _ctx: {
              local external_childid = _.Get(message, 'deviceExternalIDs.externalIds.0.externalId', null),
              local external_id = _.Get(message, 'externalSource.externalId', 'not-set'),

              serial: if external_childid != null then external_childid else external_childid,
              deviceID: std.get(message, 'deviceId', ''),
              agentID: std.get(message, 'agentId', ''),
              operationID: std.get(message, 'id', ''),
              opType: detectType(message, 'c8y_', 'unknown').type,
              id: _.ID(),
            },
          },
          topic: 'c8y/devicecontrol/notifications/' + $.message._ctx.serial + '/' + $.message._ctx.opType,
          end: false,
      }

- name: shell-operation
  topic: c8y/devicecontrol/notifications/+/c8y_Command
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set'  then
          'tedge/commands/req/' + partial
        else
          'tedge/commands/' + ctx.serial + '/req/' + partial
      ;

      {
          message: {
            command: message.payload.c8y_Command,
            _request: message.payload,
          },
          topic: build_topic('operations/command'),
      }

- name: restart-operation
  topic: c8y/devicecontrol/notifications/+/c8y_Restart
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set'  then
          'tedge/commands/req/' + partial
        else
          'tedge/commands/' + ctx.serial + '/req/' + partial
      ;
      {
          message: {},
          topic: build_topic('control/restart'),
      }

- name: upload-config-operation
  topic: c8y/devicecontrol/notifications/+/c8y_UploadConfigFile
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set' then
          'tedge/commands/req/' + partial
        else
          'tedge/' + serial + '/commands/req/' + partial
      ;
      local params = std.get(message.payload, 'c8y_UploadConfigFile', {});
      {
          local configType = std.get(params, 'type', ''),
          message: {
            # Hide id for now
            id:: ctx.id,
            type: configType,
            url: 'http://0.0.0.0:8000/tedge/file-transfer/%s/%s/%s' % [ctx.serial, 'config_snapshot', configType],
          },
          topic: build_topic('config_snapshot'),
      }

- name: download-config-operation
  topic: c8y/devicecontrol/notifications/+/c8y_DownloadConfigFile
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set'  then
          'tedge/commands/req/' + partial
        else
          'tedge/commands/' + ctx.serial + '/req/' + partial
      ;
      local fragment = std.get(message.payload, 'c8y_DownloadConfigFile', {});
      {
          message: {
            type: std.get(fragment, 'type', ''),
            url: std.get(fragment, 'url', ''),
          },
          topic: build_topic('config_update'),
      }

- name: software-update-operation
  topic: c8y/devicecontrol/notifications/+/c8y_SoftwareUpdate
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set'  then
          'tedge/commands/req/' + partial
        else
          'tedge/commands/' + ctx.serial + '/req/' + partial
      ;

      local types = std.set([
        item.softwareType
        for item in message.payload.c8y_SoftwareUpdate
      ]);

      {
        message: {
          id: ctx.id,
          updateList: [
            {
              type: type,
              modules: [
                {
                  name: software.name,
                  version: std.strReplace(software.version, "::" + type, ""),
                  action: software.action,
                }
                for software in message.payload.c8y_SoftwareUpdate
                if software.softwareType == type
              ]
            }
            for type in types
          ]
        },
        topic: build_topic('software/update'),
        end: true,
        context: false,
      }
  
- name: firmware-update-operation
  topic: c8y/devicecontrol/notifications/+/c8y_Firmware
  template:
    type: jsonnet
    value: |
      local build_topic = function(partial)
        local device_id = std.get(meta, 'device_id', '');
        if ctx.serial == device_id || ctx.serial == 'not-set'  then
          'tedge/commands/req/' + partial
        else
          'tedge/' + ctx.serial + '/commands/req/' + partial
      ;

      local params = std.get(message.payload, ctx.opType, {});

      {
        message: {
          id: if 'operationID' in ctx then ctx.operationID else ctx.ID,
          name: params.name,
          url: params.url,
          version: params.version,
          sha256: '',
        },
        topic: build_topic('firmware_update'),
        end: true,
        context: false,
      }

- name: unknown-operation
  topic: c8y/devicecontrol/notifications/+/unknown
  template:
    type: jsonnet
    value: |
      {
          message: {
            text: 'Unknown operation type. Check the _request fragment to inspect the original message',
            _request: message.payload,
          },
          topic: 'tedge/events/unknown_operation',
      }


#
# Operation Transitions
#
- name: status updates
  topic: tedge/commands/res/software/update
  description: Handle the operation updates and send the status back to the cloud
  template:
    type: jsonnet
    value: |
      local id = std.get(message, 'id', 'unknown');
      local status = std.get(message, 'status', 'unknown');
      local reason = std.get(message, 'reason', 'unknown');

      local getTemplate = function(s)
        local states = {
          executing: '501,c8y_SoftwareUpdate',
          successful: '503,c8y_SoftwareUpdate',
          failed: '502,c8y_SoftwareUpdate,"%s"' % reason,
        };
        std.get(states, s, '400,tedge_custom_mapper,"Unexpected operation state. id=%s, state=%s"' % [id, s])
      ;

      {
        raw_message: getTemplate(status),
        topic: 'c8y/s/us',
      }
