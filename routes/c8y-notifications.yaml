# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: c8y-devicecontrol-notifications
  topic: c8y/devicecontrol/notifications
  template:
    type: jsonnet
    value: |
      local detectType = function(m, prefix='', defaultType='unknown')
        {
          local _matches = [
            item.key
            for item in std.objectKeysValues(m)
            if std.isObject(item.value) && std.startsWith(item.key, prefix)
          ],
          type: if std.length(_matches) > 0 then _matches[0] else defaultType,
        };

      {
          message: {
            payload: message,
            _ctx: {
              serial: std.get(std.get(message, 'externalSource', {}), 'externalId', 'not-set'),
              deviceID: std.get(message, 'deviceId', ''),
              opType: detectType(message, 'c8y_', 'unknown').type,
            },
          },
          topic: 'c8y/devicecontrol/notifications/' + $.message._ctx.serial + '/' + $.message._ctx.opType,
          end: false,
      }

- name: shell-operation
  topic: c8y/devicecontrol/notifications/+/c8y_Command
  template:
    type: jsonnet
    value: |
      {
          message: {
            command: message.payload.c8y_Command,
            _request: message.payload,
          },
          topic: 'tedge/operations/' + ctx.serial + '/' + std.asciiLower(std.strReplace(ctx.opType, 'c8y_', '')),
      }

- name: unknown-operation
  topic: c8y/devicecontrol/notifications/+/unknown
  template:
    type: jsonnet
    value: |
      {
          message: {
            text: 'Unknown operation type. Check the _request fragment to inspect the original message',
            _request: message.payload,
          },
          topic: 'tedge/events/unknown_operation',
      }
