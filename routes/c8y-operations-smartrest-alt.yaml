# yaml-language-server: $schema=../spec/schema.json
---
disable: true
routes:
- name: Cumulocity Operation Mapper Without Preprocessor
  skip: true
  topics:
    - c8y/s/ds
  template:
    type: jsonnet
    value: |
      local toMap = function(a, keys, default=null)
        std.prune({
          [keys[i]]: if i < std.length(a) then a[i] else default,
          for i in std.range(0, std.length(keys)-1)
        });
      
      local toMapWithSplit = function(slice, sep, keys, default=null)
        std.prune({
          local a = if std.length(slice) > 0 then std.split(slice[0], sep) else [],
          [keys[i]]: if i < std.length(a) then a[i] else default,
          for i in std.range(0, std.length(keys)-1)
        });

      local toMap = function(slice, keys, default=null)
        std.prune({
          local a = if std.length(slice) > 0 then slice else [],
          [keys[i]]: if i < std.length(a) then a[i] else default,
          for i in std.range(0, std.length(keys)-1)
        });
      
      local chunks = function(a, n)
        [
          a[i:i+n]
          for i in std.range(0, std.length(a))[0:std.length(a):n]
        ];


      local toArray = function(raw_message, keys, start_index=0, sep=',')
        [
          toMap(chunk, keys)
          for chunk in chunks(std.split(raw_message, sep)[start_index:], 5)
        ];

      local parts = std.splitLimit(message, ',', 2);

      local mappings = {
        # Shell command
        # local message = '515,DeviceSerial,myFirmware,1.0,http://www.my.url';
        '511': {
          name: 'execute_command',
          message: {
            command: std.escapeStringBash(if std.length(parts) > 2 then parts[2] else ''),
          },
        },

        # Firmware update
        '515': {
          name: 'firmware_update',
          message: toMapWithSplit(parts[2:], ',', ["name", "version", "url"], null),
          skip: std.length(self.message) != 3,
        },

        # Download Configuration file type
        # 524,DeviceSerial,http://www.my.url,type
        '524': {
          name: 'config_update',
          message: toMapWithSplit(parts[2:], ',', ["url", "type"], null),
          skip: std.length(self.message) != 2,
        },

        # local message = '529,DeviceSerial,a1,v1,url1,type1,url1,a2,v2,url2,type2,url2';
        '529': {
          name: 'software/update',
          message: {
            software: toArray(message, ["name", "version", "url", "type", "action"], 2, ',')
          },
          skip: std.length(self.message) == 0,
        }
      };


      {
          c:: std.get(mappings, parts[0], {skip: true, name: '', message: {}}),
          message: $.c.message,
          skip: std.get($.c, 'skip', false),
          topic: 'tedge/operations/' + parts[1] + '/req/' + $.c.name,
      }
