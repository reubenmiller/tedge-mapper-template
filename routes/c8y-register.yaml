# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: c8y-registration-child
  topics:
    - tedge/register/child/+
    - tedge/+/register/child/+
  description: |
    Register a child device

    Documentation: https://cumulocity.com/guides/reference/smartrest-two/#101

    101,uniqueChildId,myChildDevice,myChildType
    114,c8y_Restart,c8y_Configuration,c8y_SoftwareList


  template:
    type: jsonnet
    value: |
      local tedge = import 'tedge.libsonnet';
      local prefix = std.split(topic, '/register/child/')[0];
      local name = std.splitLimitR(topic, "/", 1)[1];
      local outTopic = tedge.getSmartRestTopic(prefix, meta.device_id, 'c8y/s/us');
      local childSerial = tedge.getExternalId([meta.device_id, name]);

      assert std.isObject(message) : 'Invalid message. Only objects are accepted';

      # set defaults
      local messageWithDefaults = {
        requiredInterval: 30,
      } + message;

      {
        topic: outTopic,
        updates: [
          # Note: this message needs to be delayed until after the registration has happened
          local supportedTypes = std.get(message, 'supportedOperations', []);
          {
            topic: 'c8y/s/us/%s' % childSerial,
            message: "114,%s" % std.join(",", supportedTypes),
            delay: 5, # Delay publishing until after the registration message has been sent
            skip: std.length(supportedTypes) == 0,
          },

          {
            topic: 'c8y/s/us/%s' % childSerial,
            message: "117,%s" % messageWithDefaults.requiredInterval,
            delay: 6,
            skip: !std.isNumber(messageWithDefaults.requiredInterval),
          },
        ],
        raw_message: '101,"%s","%s","%s"' % [
          childSerial,
          std.get(message, 'name', name),
          std.get(message, 'type', 'c8y_MQTTChildDevice'),
        ],
      }
