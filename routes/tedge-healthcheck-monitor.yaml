# yaml-language-server: $schema=../spec/schema.json
---
routes:
- name: monitor 
  topics:
    - te/+/+/+/+/status/health
  description: |
    Create events when a service health changes (or is re-sent)

    If the service name is tedge-mapper-c8y, then it should create/clear
    a Cumulocity IoT alarm instead of sending an event, and the alarm should
    be sent directly to the cloud.
  template:
    type: jsonnet
    value: |
      local c8y = import 'c8y.libsonnet';

      local serviceName = std.split(topic, '/')[4];
      local status = c8y.service.status(message);
      
      local alarm = function() std.get({
        up: {
          topic: 'c8y/s/us',
          raw_message: '306,tedge_service_down_%s' % serviceName,
        },
        down: {
          topic: 'c8y/alarm/alarms/create',
          message: {
            type: 'tedge_service_down_%s' % serviceName,
            text: 'The %s is down' % serviceName,
            severity: if std.startsWith(serviceName, 'tedge-mapper') then 'CRITICAL' else 'MAJOR',
            time: _.Now()
          },
          context: false,
          text: 'The %s is down' % serviceName,
        },
      }, status, {});

      local out_message = alarm();
      out_message + { skip: std.length(out_message) == 0 }
